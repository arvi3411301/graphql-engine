trigger:
- master

pr:
  branches:
    include:
      - master

resources:
  containers:
    - container: server_builder
      image: face11301/graphql-engine-server-builder:20190404
    - container: postgres_9_5
      image: circleci/postgres:9.5-alpine-postgis
      env:
        POSTGRES_USER: gql_test
        POSTGRES_DB: gql_test
    - container: postgres_9_6
      image: circleci/postgres:9.6-alpine-postgis
      env:
        POSTGRES_USER: gql_test
        POSTGRES_DB: gql_test
    - container: postgres_10_6
      image: circleci/postgres:10.6-alpine-postgis
      env:
        POSTGRES_USER: gql_test
        POSTGRES_DB: gql_test
    - container: postgres_11_1
      image: mdillon/postgis:11-alpine
      env:
        POSTGRES_USER: gql_test
        POSTGRES_DB: gql_test

jobs:
  - job: build_server
    pool:
      vmImage: 'ubuntu-16.04'
    container: server_builder
    steps:
      - checkout: self
        clean: true
      - bash: |
          build_output=$BUILD_OUTPUT BUILD_FLAGS="--fast --coverage" make ci-binary
        workingDirectory: $(Build.Repository.LocalPath)/server
        displayName: Running non-optimized build with coverage
        condition: in(variables['Build.Reason'], 'PullRequest')
        env:
          BUILD_OUTPUT: $(Build.ArtifactStagingDirectory)/server_output
      - bash: |
          build_output=$BUILD_OUTPUT make ci-binary
        workingDirectory: $(Build.Repository.LocalPath)/server
        displayName: Running optimized build with coverage
        condition: in(variables['Build.Reason'], 'IndividualCI', 'Manual')
        env:
          BUILD_OUTPUT: $(Build.ArtifactStagingDirectory)/server_output
      - bash: |
          build_output=$BUILD_OUTPUT make ci-image
          build_output=$BUILD_OUTPUT make ci-save-image
        workingDirectory: $(Build.Repository.LocalPath)/server
        displayName: Build docker image and save to artifacts folder
        env:
          BUILD_OUTPUT: $(Build.ArtifactStagingDirectory)/server_output
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)/server_output
          artifactName: serverOutput
        condition: always()
  - job: pytest_server
    pool:
      vmImage: 'ubuntu-16.04'
    container: server_builder
    dependsOn:
      - build_server
    strategy:
      matrix:
        postgres_9_5:
          serviceName: postgres_9_5
          version: "9_5"
        postgres_9_6:
          serviceName: postgres_9_6
          version: "9_6"
        postgres_10_6:
          serviceName: postgres_10_6
          version: "10_6"
        postgres_11_1:
          serviceName: postgres_11_1
          version: "11_1"
    services:
      postgres: $[ variables['serviceName'] ]
    steps:
      - task: DownloadPipelineArtifact@0
        displayName: Downloading serverOutput artifact
        inputs:
          artifactName: serverOutput
          targetPath: $(Build.ArtifactStagingDirectory)/server_output
      - checkout: self
        clean: true
      - bash: |
          chmod +x $GRAPHQL_ENGINE
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          OUTPUT_FOLDER=$SERVER_OUTPUT_URL/$PG_VERSION .circleci/test-server.sh
        displayName: Running python tests
        env:
          HASURA_GRAPHQL_DATABASE_URL: 'postgres://gql_test:@postgres:5432/gql_test'
          GRAPHQL_ENGINE: $(Build.ArtifactStagingDirectory)/server_output/graphql-engine
          SERVER_OUTPUT_URL: $(Build.ArtifactStagingDirectory)/_server_test_output
          PG_VERSION: '$(version)'
      - bash: |
          stack --system-ghc hpc report $SERVER_OUTPUT_URL/$PG_VERSION/graphql-engine.tix --destdir $SERVER_OUTPUT_URL/$PG_VERSION
        displayName: Generating coverage report
        workingDirectory: $(Build.Repository.LocalPath)/server
        env:
          PG_VERSION: '$(version)'
          SERVER_OUTPUT_URL: $(Build.ArtifactStagingDirectory)/_server_test_output
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)/_server_test_output/$(version)
          artifactName: serverTestOutput$(version)
        condition: always()