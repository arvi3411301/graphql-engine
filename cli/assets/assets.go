// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdd\x8a\x1b\x47\x13\xbd\xf7\x53\x14\xfd\xf1\xe1\x9b\x4c\xb7\xd6\x31\xc4\x8c\xa4\x05\x93\x10\x12\x92\xc0\x42\xbc\xb9\x35\xb5\x3d\x35\x33\xb5\xee\xe9\x9e\x74\xb5\xb4\x3b\x11\x7a\xf7\x30\x7f\xd2\x48\x6b\x30\x31\x09\xba\xe9\xfa\xeb\x53\xa7\xba\xe6\x68\x53\xa7\xc6\x81\x43\x5f\x6d\x15\xf9\x6c\x27\xea\xf6\x15\xc0\xa6\x26\x2c\xfa\x03\xc0\xc6\xb1\xff\x04\x91\xdc\x56\xb1\x0d\x5e\x41\xea\x5a\xda\x2a\x6e\xb0\x22\xd3\xfa\x4a\x41\x1d\xa9\xdc\xaa\x3a\xa5\x56\x72\x63\x24\x85\x88\x15\xe9\x2a\x84\xca\x11\xb6\x2c\xda\x86\xc6\xd4\x28\xbb\x88\x59\x15\xb1\xad\xff\x74\x19\xf9\x8a\x3d\x19\x1b\xbc\x04\x47\x06\x45\x28\x89\x29\x71\xdf\x63\xe8\xe1\x5a\x33\xe1\x8b\x8d\xdc\xa6\xd1\x00\x78\x62\x5f\x84\x27\xfd\xf1\x23\xf9\x3d\x6c\xe1\x30\xb9\x01\xb0\xe5\x9f\x82\xa4\x1c\x0e\x07\x3d\x9d\x8f\xc7\x6f\x96\xe1\xbb\x10\x53\x0e\x6a\x8c\xf7\xc6\xf1\xa8\xce\x09\xd6\xf1\x1f\x14\x85\x83\x1f\xae\x38\x9b\xcb\x5b\x0a\x4c\xf8\xbe\xe5\xfb\xe8\x86\xa4\xb3\xf9\x99\xa4\xe5\x6d\x97\xae\x65\xf2\xe1\x90\x01\x97\xa0\x6b\x94\xf7\xd6\x92\xc8\x2f\xd4\xc1\xf1\x78\xee\x7b\x76\x8e\xc4\x8a\x86\xfd\xef\x64\x23\xa5\xcb\x4b\x80\x9c\xd0\x45\xdd\x39\xf3\x4b\x95\xbe\x80\x6c\x51\xb9\x8b\xee\x2e\x52\xc9\xcf\x39\x28\xb3\x1c\xd0\xf8\x56\xbf\x85\x82\x72\x50\xd6\xf1\xe5\xf0\xee\xef\x7f\xfe\x61\x9e\x5c\x7f\x5e\xa2\x90\xc7\x07\x47\x1f\xc8\x51\x43\x29\x8e\x54\xae\x7c\xcb\xf4\x36\x86\xe7\xee\x0e\x53\x3d\x24\x9e\xac\x53\x8f\xc7\xf5\xb8\x19\xe6\xbc\x1a\x1b\x33\x6f\xec\xe6\x21\x14\xdd\xbc\x3a\xa9\x73\x34\x9e\x75\x83\xec\xbf\x0f\x3e\x91\x4f\xa7\xad\x29\x58\x5a\x87\x5d\x0e\xaf\x7d\xf0\xf4\x7a\x3d\xb9\x43\x8b\x96\x53\x97\xc3\x6a\xf6\xa4\x88\x5e\x38\x0d\xcf\x39\x45\x41\xbf\x59\x09\x38\xf6\x84\x71\x4c\x3b\xbe\x00\xd2\x52\x87\xa7\xcf\xa0\x3d\xb8\x60\x3f\xbd\x84\xbb\xf9\x0a\xb8\x8d\x99\x48\x8e\x56\xc1\x7b\xe0\x62\xab\x5c\xc0\x82\x7d\xa5\xe6\xcf\x66\x08\x58\x87\x22\x5b\xd5\x62\x45\xd9\x9c\x00\x43\xf9\x56\x4d\x79\x0d\xfb\xac\x26\xae\xea\x94\xc3\xcd\x6a\xb5\xaf\xd7\xa7\xef\xae\xe8\xdf\xe3\x66\xb5\xfa\xff\xfa\x9a\x4f\xe9\xe8\x79\x76\xa2\xe3\xca\x67\x9c\xa8\x91\x1c\x2c\xf9\x44\x71\x0e\x95\xc1\xa7\xac\xc4\x86\x5d\x97\x83\xa0\x97\x4c\x28\x72\x39\x87\x1f\x77\x92\xb8\xec\x32\x3b\xce\xee\xba\xfa\x44\xa5\x7f\xd7\x16\xfd\xcc\xe6\x9a\xc1\x84\x23\xfc\x17\xe5\xf0\x86\x9a\xf5\xc9\xdf\x60\xac\xd8\x67\x29\xb4\x39\x64\xdf\x2e\x23\x36\xb8\x10\x73\xf8\xdf\xbb\xb7\xfd\xef\xec\x5f\x60\xfe\x3a\xce\x4b\x6b\x3d\x4f\xd4\xf4\x5d\x9c\xe6\x6b\x0a\xde\x4f\x5b\xb7\x38\xce\xcf\x31\x71\x52\x73\xd3\x8b\x1d\x51\xb7\xcb\x82\xb3\xd8\x0e\xac\xa4\x26\x4a\xd7\x0a\x6b\x0b\xff\x28\xda\xba\xb0\x2b\x4a\x87\x91\x06\x7d\xc5\x47\x7c\x36\x8e\x1f\xc4\x0c\xf4\xf1\x89\x24\x34\x64\xde\xea\xef\xf4\xca\x58\xb9\x74\xeb\x86\xbd\xb6\x22\xca\xfc\x03\xd8\xaf\x12\xf6\x5e\x79\x06\x6d\x3f\x49\x9f\xe9\xb9\x0f\xe0\x60\x6b\x8c\x42\x69\xab\xee\x3f\xfc\x98\xbd\x53\x97\x82\x0f\x12\xed\xbf\x0f\xbe\x27\x5f\x84\xa8\x1f\x5f\xa2\xdf\x2e\xe5\xe4\x3f\xee\x62\x18\xc1\x97\x7a\xd8\x98\x51\xc9\x36\xa6\xff\x8b\xbe\x7d\xf5\x77\x00\x00\x00\xff\xff\x95\xcc\x03\xd0\xaa\x07\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 1962, mode: os.FileMode(420), modTime: time.Unix(1552593486, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdd\x8a\x1b\x47\x13\xbd\xf7\x53\x14\xfd\xf1\xe1\x9b\x4c\xb7\xd6\x31\xc4\x8c\xa4\x05\x93\x10\x12\x92\xc0\x42\xbc\xb9\x35\xb5\x3d\x35\x33\xb5\xee\xe9\x9e\x74\xb5\xb4\x3b\x11\x7a\xf7\x30\x7f\xd2\x48\x6b\x30\x31\x09\xba\xe9\xfa\xeb\x53\xa7\xba\xe6\x68\x53\xa7\xc6\x81\x43\x5f\x6d\x15\xf9\x6c\x27\xea\xf6\x15\xc0\xa6\x26\x2c\xfa\x03\xc0\xc6\xb1\xff\x04\x91\xdc\x56\xb1\x0d\x5e\x41\xea\x5a\xda\x2a\x6e\xb0\x22\xd3\xfa\x4a\x41\x1d\xa9\xdc\xaa\x3a\xa5\x56\x72\x63\x24\x85\x88\x15\xe9\x2a\x84\xca\x11\xb6\x2c\xda\x86\xc6\xd4\x28\xbb\x88\x59\x15\xb1\xad\xff\x74\x19\xf9\x8a\x3d\x19\x1b\xbc\x04\x47\x06\x45\x28\x89\x29\x71\xdf\x63\xe8\xe1\x5a\x33\xe1\x8b\x8d\xdc\xa6\xd1\x00\x78\x62\x5f\x84\x27\xfd\xf1\x23\xf9\x3d\x6c\xe1\x30\xb9\x01\xb0\xe5\x9f\x82\xa4\x1c\x0e\x07\x3d\x9d\x8f\xc7\x6f\x96\xe1\xbb\x10\x53\x0e\x6a\x8c\xf7\xc6\xf1\xa8\xce\x09\xd6\xf1\x1f\x14\x85\x83\x1f\xae\x38\x9b\xcb\x5b\x0a\x4c\xf8\xbe\xe5\xfb\xe8\x86\xa4\xb3\xf9\x99\xa4\xe5\x6d\x97\xae\x65\xf2\xe1\x90\x01\x97\xa0\x6b\x94\xf7\xd6\x92\xc8\x2f\xd4\xc1\xf1\x78\xee\x7b\x76\x8e\xc4\x8a\x86\xfd\xef\x64\x23\xa5\xcb\x4b\x80\x9c\xd0\x45\xdd\x39\xf3\x4b\x95\xbe\x80\x6c\x51\xb9\x8b\xee\x2e\x52\xc9\xcf\x39\x28\xb3\x1c\xd0\xf8\x56\xbf\x85\x82\x72\x50\xd6\xf1\xe5\xf0\xee\xef\x7f\xfe\x61\x9e\x5c\x7f\x5e\xa2\x90\xc7\x07\x47\x1f\xc8\x51\x43\x29\x8e\x54\xae\x7c\xcb\xf4\x36\x86\xe7\xee\x0e\x53\x3d\x24\x9e\xac\x53\x8f\xc7\xf5\xb8\x19\xe6\xbc\x1a\x1b\x33\x6f\xec\xe6\x21\x14\xdd\xbc\x3a\xa9\x73\x34\x9e\x75\x83\xec\xbf\x0f\x3e\x91\x4f\xa7\xad\x29\x58\x5a\x87\x5d\x0e\xaf\x7d\xf0\xf4\x7a\x3d\xb9\x43\x8b\x96\x53\x97\xc3\x6a\xf6\xa4\x88\x5e\x38\x0d\xcf\x39\x45\x41\xbf\x59\x09\x38\xf6\x84\x71\x4c\x3b\xbe\x00\xd2\x52\x87\xa7\xcf\xa0\x3d\xb8\x60\x3f\xbd\x84\xbb\xf9\x0a\xb8\x8d\x99\x48\x8e\x56\xc1\x7b\xe0\x62\xab\x5c\xc0\x82\x7d\xa5\xe6\xcf\x66\x08\x58\x87\x22\x5b\xd5\x62\x45\xd9\x9c\x00\x43\xf9\x56\x4d\x79\x0d\xfb\xac\x26\xae\xea\x94\xc3\xcd\x6a\xb5\xaf\xd7\xa7\xef\xae\xe8\xdf\xe3\x66\xb5\xfa\xff\xfa\x9a\x4f\xe9\xe8\x79\x76\xa2\xe3\xca\x67\x9c\xa8\x91\x1c\x2c\xf9\x44\x71\x0e\x95\xc1\xa7\xac\xc4\x86\x5d\x97\x83\xa0\x97\x4c\x28\x72\x39\x87\x1f\x77\x92\xb8\xec\x32\x3b\xce\xee\xba\xfa\x44\xa5\x7f\xd7\x16\xfd\xcc\xe6\x9a\xc1\x84\x23\xfc\x17\xe5\xf0\x86\x9a\xf5\xc9\xdf\x60\xac\xd8\x67\x29\xb4\x39\x64\xdf\x2e\x23\x36\xb8\x10\x73\xf8\xdf\xbb\xb7\xfd\xef\xec\x5f\x60\xfe\x3a\xce\x4b\x6b\x3d\x4f\xd4\xf4\x5d\x9c\xe6\x6b\x0a\xde\x4f\x5b\xb7\x38\xce\xcf\x31\x71\x52\x73\xd3\x8b\x1d\x51\xb7\xcb\x82\xb3\xd8\x0e\xac\xa4\x26\x4a\xd7\x0a\x6b\x0b\xff\x28\xda\xba\xb0\x2b\x4a\x87\x91\x06\x7d\xc5\x47\x7c\x36\x8e\x1f\xc4\x0c\xf4\xf1\x89\x24\x34\x64\xde\xea\xef\xf4\xca\x58\xb9\x74\xeb\x86\xbd\xb6\x22\xca\xfc\x03\xd8\xaf\x12\xf6\x5e\x79\x06\x6d\x3f\x49\x9f\xe9\xb9\x0f\xe0\x60\x6b\x8c\x42\x69\xab\xee\x3f\xfc\x98\xbd\x53\x97\x82\x0f\x12\xed\xbf\x0f\xbe\x27\x5f\x84\xa8\x1f\x5f\xa2\xdf\x2e\xe5\xe4\x3f\xee\x62\x18\xc1\x97\x7a\xd8\x98\x51\xc9\x36\xa6\xff\x8b\xbe\x7d\xf5\x77\x00\x00\x00\xff\xff\x95\xcc\x03\xd0\xaa\x07\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1962, mode: os.FileMode(420), modTime: time.Unix(1552593474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x8f\xe3\x34\x10\x7f\xbf\x4f\x31\x32\x42\xf7\x42\xec\xee\x71\x12\xa7\xb4\x59\xe9\xc4\x09\x81\x00\x69\xa5\xbb\xe5\xf5\xe4\x75\x26\xc9\xec\x39\x76\xf0\xb8\xdd\x86\xaa\xdf\x1d\xe5\x5f\x93\x76\x17\x16\x56\xa0\xbe\x78\xfe\xfb\xf7\x9b\xc9\xb8\x9b\x2a\xd6\x16\xac\x76\x65\x26\xd0\x25\x5b\x16\xd7\xaf\x00\x36\x15\xea\xbc\x3b\x00\x6c\x2c\xb9\x2f\x10\xd0\x66\x82\x8c\x77\x02\x62\xdb\x60\x26\xa8\xd6\x25\xaa\xc6\x95\x02\xaa\x80\x45\x26\xaa\x18\x1b\x4e\x95\xe2\xe8\x83\x2e\x51\x96\xde\x97\x16\x75\x43\x2c\x8d\xaf\x55\xa5\x79\x1b\x74\x52\x06\xdd\x54\xbf\xdb\x04\x5d\x49\x0e\x95\xf1\x8e\xbd\x45\xa5\x99\x31\xb2\x2a\xf4\xae\xab\x21\xfb\xb4\x6a\xac\xcf\x26\x50\x13\x07\x01\xe0\x81\x5c\xee\x1f\xe4\xe7\xcf\xe8\x76\x90\xc1\x61\x54\x03\xe8\x86\x7e\xf4\x1c\x53\x38\x1c\xe4\x78\x3e\x1e\xbf\x59\x9a\x6f\x7c\x88\x29\x88\xc1\xde\x09\xc7\xa3\x98\x1d\x8c\xa5\xdf\x30\x30\x79\xd7\xa7\x98\xc5\x65\x96\x5c\x47\xfd\xbe\xa1\xdb\x60\x7b\xa7\x59\x7c\xc2\x69\x99\xed\x5c\xb5\x74\x3e\x1c\x12\xa0\x02\x64\xa5\xf9\xbd\x31\xc8\xfc\x33\xb6\x70\x3c\xce\xf7\x9e\x94\x03\xb0\xbc\x26\xf7\x11\x4d\xc0\x78\x9e\x04\xd0\x32\x9e\xc5\xcd\x9e\xcf\x45\xba\x1c\x92\x45\xe4\x36\xd8\x9b\x80\x05\xed\x53\x10\x6a\x49\xd0\xd0\xab\x5f\x7d\x8e\x29\x08\x63\xe9\x9c\xbc\xdb\xdb\x9f\x3e\x4c\xcc\x75\xe7\x65\x15\x74\xfa\xce\xe2\x27\xb4\x58\x63\x0c\x03\x94\x0b\xdd\xd2\xbd\x09\x7e\xdf\xde\xe8\x58\xf5\x8e\x27\xe9\x74\xc7\xe3\x7a\x98\x0c\x35\x8f\xc6\x46\x4d\x13\xbb\xb9\xf3\x79\x3b\x8d\x4e\x6c\x2d\x0e\x67\x59\x6b\x72\xdf\x7b\x17\xd1\xc5\xd3\xd4\xe4\xc4\x8d\xd5\x6d\x0a\xaf\x9d\x77\xf8\x7a\x3d\xaa\x7d\xa3\x0d\xc5\x36\x85\xd5\xa4\x89\x41\x3b\xa6\xd8\xb7\x73\xb4\x82\x7c\xb3\x62\xb0\xe4\x50\x87\xc1\xed\xf8\xa8\x90\xe4\xca\x3f\x3c\x51\xed\xce\x7a\xf3\xe5\x71\xb9\xab\x17\x94\xdb\xa8\x11\xe4\x20\xe5\xb4\x03\xca\x33\x61\xbd\xce\xc9\x95\x62\xfa\x6c\x7a\x83\xb1\x9a\x39\x13\x8d\x2e\x31\x99\x1c\xa0\x0f\xcf\xc4\xe8\x57\x93\x4b\x2a\xa4\xb2\x8a\x29\x5c\xad\x56\xbb\x6a\x7d\xfa\xee\xf2\xae\x1f\x57\xab\xd5\xd7\xeb\x4b\x3c\x85\xc5\xfd\xa4\xd4\x96\x4a\x97\x50\xc4\x9a\x53\x30\xe8\x22\x86\xc9\x54\x78\x17\x93\x42\xd7\x64\xdb\x14\x58\x3b\x4e\x18\x03\x15\x93\xf9\x7e\xcb\x91\x8a\x36\x31\x03\x77\x97\xd1\x27\x28\x5d\x5f\x1b\xed\x26\x34\x97\x08\xc6\x3a\x4c\x7f\x60\x0a\x6f\xb0\x5e\x9f\xf4\xb5\x0e\x25\xb9\x24\xfa\x26\x85\xe4\xdb\xa5\xc5\x78\xeb\x43\x0a\x5f\xbd\x7b\xdb\xfd\x66\xfd\xa2\xe6\x2f\x03\x5f\x52\xca\x89\x51\xd5\xdd\xe2\xc4\xaf\xca\x69\x37\x4e\xdd\xe2\x38\xb5\x63\xc4\x24\xa6\x4b\x2f\x66\x44\x5c\x2f\x03\xe6\x65\xdb\xa3\xe2\x0a\x31\x5e\x6e\x58\x93\xbb\x7b\x96\xc6\xfa\x6d\x5e\x58\x1d\xb0\xdf\xaf\xfa\x5e\xef\x95\xa5\x3b\x56\x3d\x7c\xfd\x80\xec\x6b\x54\x6f\xe5\x77\x72\xa5\x0c\x9f\xab\x65\x4d\x4e\x1a\x66\xa1\xc6\xb9\x39\x1c\xfa\x25\x64\x2c\x7d\x8c\x3a\x92\xf9\x40\xa1\x5b\x26\xcf\xdf\x49\x71\xef\xaf\x3a\x40\x7d\x46\x30\x95\x0e\x8c\x31\x13\xb7\x9f\x7e\x48\xde\x89\xf3\x2d\x0e\x1c\xcc\x1c\xb4\x43\x97\xfb\x20\xef\x1f\x47\x5d\x2f\xbf\xed\xbf\x88\xee\x4b\xfe\x7d\xec\x84\x6d\x5a\x8e\xff\x9c\xe3\x17\xbd\x62\xdd\x9a\xed\x1f\xb2\xd3\x9e\xff\x77\xbc\xfc\xd7\xc5\x5f\xc6\xef\xff\x42\xc1\xf3\x7d\x1a\x5f\xa2\xa1\x4b\x1b\x35\x6c\xf1\x8d\xea\xfe\x9e\x5c\xbf\xfa\x33\x00\x00\xff\xff\x19\x42\xbe\xbf\xa6\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2214, mode: os.FileMode(420), modTime: time.Unix(1552593481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

