// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8f\xe3\x34\x10\x7e\xbf\xbf\x62\x64\x84\xee\x01\x62\x77\x8f\x93\x38\x65\xdb\x95\x4e\x20\x24\xc4\x21\x9d\xe0\xca\xeb\xca\x6b\x4f\x92\xd9\x73\xec\xe0\x71\xbb\x0d\x55\xff\x77\x94\x9f\x4d\xbb\x2b\x10\x08\xd4\x17\xfb\x9b\x6f\xfa\x79\x3e\x4f\xc6\xeb\x2a\xd5\x0e\x9c\xf6\xe5\x46\xa0\xcf\x76\x2c\xee\x5e\x01\xac\x2b\xd4\xb6\x5b\x00\xac\x1d\xf9\xcf\x10\xd1\x6d\x04\x99\xe0\x05\xa4\xb6\xc1\x8d\xa0\x5a\x97\xa8\x78\x5f\x7e\x75\xa8\x9d\x80\x2a\x62\xb1\x11\x55\x4a\x0d\xe7\x4a\x95\x51\x37\xd5\xef\x2e\x43\x5f\x92\xc7\xcc\x58\x2f\x2b\xcd\xbb\xa8\x25\x05\x45\x75\xa9\x86\xdd\x7d\xf7\x87\xf7\x65\x44\xf4\x92\xf7\xa5\x00\x35\x4a\xb2\x89\xd4\xa4\x61\x03\xf0\x44\xde\x86\x27\x79\x7f\x8f\x7e\x0f\x1b\x38\x8e\x30\x80\x6e\x68\xfb\xcb\x87\x1c\x8e\x47\x39\x2c\x4f\xa7\xaf\xe7\xa0\x71\xf4\x1b\x46\xa6\xe0\x7b\xc2\x79\xbb\x24\x59\x9d\xf4\xfb\x86\xb6\xd1\xf5\xa4\xf3\xf6\x05\xd2\xf2\xdf\x2e\xa1\x25\xf9\x78\xcc\x80\x0a\xf0\x21\x81\x6c\x62\x38\xb4\x1f\x75\xaa\xe0\x74\xba\x26\x74\x86\xbc\x37\x06\x99\x7f\xc2\x76\x19\xd7\x13\x38\xd4\x65\x6b\xf2\xbf\xa2\x89\x98\x2e\x55\x00\x1d\xe3\x45\xde\x99\xf9\xd7\x99\x19\xa0\xb7\xd7\x27\xba\x82\x76\xd1\x7d\x8c\x58\xd0\x21\x07\xa1\xc4\xc2\xd4\xe0\x39\x38\xfc\x39\x58\xcc\x41\x18\x47\xe2\xc2\xf0\xed\xf6\xc7\xef\x27\xb7\xbb\xf5\x0b\xc6\x9c\x4d\x59\xc8\xcd\x58\x9f\xbc\x60\x5c\x56\xec\x2d\x64\x8b\x2c\xf4\xfa\xc1\xe1\x27\x74\x58\x63\x8a\x83\x5f\x57\xd8\xcc\x3e\xdd\x0e\x9d\xa5\xce\xad\xb5\x56\x53\x93\xaf\x1f\x82\x6d\xa7\xd6\x4b\xad\xc3\x61\x2d\x6b\x4d\xfe\xbb\xe0\x13\xfa\x34\x77\x9d\x25\x6e\x9c\x6e\x73\x78\xed\x83\xc7\xd7\xb7\x23\x1c\x1a\x6d\x28\xb5\x39\xac\x26\x24\x45\xed\x99\x52\xdf\x31\x63\x14\xe4\x9b\x15\x83\x23\x8f\x3a\x0e\xb4\xd3\x33\x21\xc9\x55\x78\x7a\x41\xed\xc1\x05\xf3\xf9\xb9\xdc\xcd\xbf\x90\x5b\xab\xb1\xc8\x61\x67\x69\x0f\x64\x37\xc2\x05\x6d\xc9\x97\x62\xfa\xec\xfa\x80\x71\x9a\x79\x23\x1a\x5d\x62\x36\x11\xa0\x4f\xdf\x88\x91\x57\x93\xcf\x2a\xa4\xb2\x4a\x39\xdc\xac\x56\xfb\xea\x76\xfe\x6e\x6d\x77\xa3\x37\xab\xd5\x97\xb7\xd7\xf5\x14\x0e\x0f\x13\xa8\x1d\x95\x3e\xa3\x84\x35\xe7\x60\xd0\x27\x8c\x53\xa8\x08\x3e\x65\x85\xae\xc9\xb5\x39\xb0\xf6\x9c\x31\x46\x2a\xa6\xf0\xe3\x8e\x13\x15\x6d\x66\x06\xef\xae\xb3\xe7\x52\xba\x7b\x6d\xb4\x9f\xaa\xb9\xae\x60\xd4\x61\xfa\x03\x73\x78\x83\xf5\xed\x8c\xd7\x3a\x96\xe4\xb3\x14\x9a\x1c\xb2\x6f\x96\x11\x13\x5c\x88\x39\x7c\xf1\xee\x6d\xf7\x3b\xe3\x0b\xcd\x0f\x83\x5f\x52\xca\xc9\x51\xd5\x9d\x62\xf6\x57\x59\xda\x8f\x5d\xb7\x58\x4e\xd7\x31\xd6\x24\xa6\x43\x2f\x7a\x44\xdc\x2d\x13\xce\xf3\xb9\xaf\x8a\x2b\xc4\x74\x3d\x90\x8d\xf5\x8f\x2c\x8d\x0b\x3b\x5b\x38\x1d\x51\x9a\x50\x2b\xfd\xa8\x0f\xca\xd1\x03\xab\xbe\x7c\xfd\x84\x1c\x6a\x54\x6f\xe5\xb7\x72\xa5\x0c\x5f\xc2\xb2\x26\x2f\x0d\xb3\x50\xff\x40\x96\x53\x88\xba\x44\x59\x86\x50\x3a\xd4\x0d\x71\x2f\x3c\x4c\xff\xec\xf2\x95\x50\xe3\x6c\x51\xdd\xec\x62\xc6\xc4\xf3\x74\x55\x5d\xed\xbd\x38\x98\x4a\x47\xc6\xb4\x11\xdb\x4f\x3f\x64\xef\xc4\xe5\x83\x01\x1c\xcd\x7f\x2f\xbe\x47\x6f\x43\x94\x8f\xcf\xd5\xef\x96\xe3\xe4\x7f\x3e\x45\x6f\xc1\xdf\x9d\x61\xad\x86\x49\xb6\x56\xdd\xab\x7e\xf7\xea\xcf\x00\x00\x00\xff\xff\x40\xf2\xf6\xc6\xdd\x07\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 2013, mode: os.FileMode(420), modTime: time.Unix(1554295704, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8f\xe3\x34\x10\x7e\xbf\xbf\x62\x64\x84\xee\x01\x62\x77\x8f\x93\x38\x65\xdb\x95\x4e\x20\x24\xc4\x21\x9d\xe0\xca\xeb\xca\x6b\x4f\x92\xd9\x73\xec\xe0\x71\xbb\x0d\x55\xff\x77\x94\x9f\x4d\xbb\x2b\x10\x08\xd4\x17\xfb\x9b\x6f\xfa\x79\x3e\x4f\xc6\xeb\x2a\xd5\x0e\x9c\xf6\xe5\x46\xa0\xcf\x76\x2c\xee\x5e\x01\xac\x2b\xd4\xb6\x5b\x00\xac\x1d\xf9\xcf\x10\xd1\x6d\x04\x99\xe0\x05\xa4\xb6\xc1\x8d\xa0\x5a\x97\xa8\x78\x5f\x7e\x75\xa8\x9d\x80\x2a\x62\xb1\x11\x55\x4a\x0d\xe7\x4a\x95\x51\x37\xd5\xef\x2e\x43\x5f\x92\xc7\xcc\x58\x2f\x2b\xcd\xbb\xa8\x25\x05\x45\x75\xa9\x86\xdd\x7d\xf7\x87\xf7\x65\x44\xf4\x92\xf7\xa5\x00\x35\x4a\xb2\x89\xd4\xa4\x61\x03\xf0\x44\xde\x86\x27\x79\x7f\x8f\x7e\x0f\x1b\x38\x8e\x30\x80\x6e\x68\xfb\xcb\x87\x1c\x8e\x47\x39\x2c\x4f\xa7\xaf\xe7\xa0\x71\xf4\x1b\x46\xa6\xe0\x7b\xc2\x79\xbb\x24\x59\x9d\xf4\xfb\x86\xb6\xd1\xf5\xa4\xf3\xf6\x05\xd2\xf2\xdf\x2e\xa1\x25\xf9\x78\xcc\x80\x0a\xf0\x21\x81\x6c\x62\x38\xb4\x1f\x75\xaa\xe0\x74\xba\x26\x74\x86\xbc\x37\x06\x99\x7f\xc2\x76\x19\xd7\x13\x38\xd4\x65\x6b\xf2\xbf\xa2\x89\x98\x2e\x55\x00\x1d\xe3\x45\xde\x99\xf9\xd7\x99\x19\xa0\xb7\xd7\x27\xba\x82\x76\xd1\x7d\x8c\x58\xd0\x21\x07\xa1\xc4\xc2\xd4\xe0\x39\x38\xfc\x39\x58\xcc\x41\x18\x47\xe2\xc2\xf0\xed\xf6\xc7\xef\x27\xb7\xbb\xf5\x0b\xc6\x9c\x4d\x59\xc8\xcd\x58\x9f\xbc\x60\x5c\x56\xec\x2d\x64\x8b\x2c\xf4\xfa\xc1\xe1\x27\x74\x58\x63\x8a\x83\x5f\x57\xd8\xcc\x3e\xdd\x0e\x9d\xa5\xce\xad\xb5\x56\x53\x93\xaf\x1f\x82\x6d\xa7\xd6\x4b\xad\xc3\x61\x2d\x6b\x4d\xfe\xbb\xe0\x13\xfa\x34\x77\x9d\x25\x6e\x9c\x6e\x73\x78\xed\x83\xc7\xd7\xb7\x23\x1c\x1a\x6d\x28\xb5\x39\xac\x26\x24\x45\xed\x99\x52\xdf\x31\x63\x14\xe4\x9b\x15\x83\x23\x8f\x3a\x0e\xb4\xd3\x33\x21\xc9\x55\x78\x7a\x41\xed\xc1\x05\xf3\xf9\xb9\xdc\xcd\xbf\x90\x5b\xab\xb1\xc8\x61\x67\x69\x0f\x64\x37\xc2\x05\x6d\xc9\x97\x62\xfa\xec\xfa\x80\x71\x9a\x79\x23\x1a\x5d\x62\x36\x11\xa0\x4f\xdf\x88\x91\x57\x93\xcf\x2a\xa4\xb2\x4a\x39\xdc\xac\x56\xfb\xea\x76\xfe\x6e\x6d\x77\xa3\x37\xab\xd5\x97\xb7\xd7\xf5\x14\x0e\x0f\x13\xa8\x1d\x95\x3e\xa3\x84\x35\xe7\x60\xd0\x27\x8c\x53\xa8\x08\x3e\x65\x85\xae\xc9\xb5\x39\xb0\xf6\x9c\x31\x46\x2a\xa6\xf0\xe3\x8e\x13\x15\x6d\x66\x06\xef\xae\xb3\xe7\x52\xba\x7b\x6d\xb4\x9f\xaa\xb9\xae\x60\xd4\x61\xfa\x03\x73\x78\x83\xf5\xed\x8c\xd7\x3a\x96\xe4\xb3\x14\x9a\x1c\xb2\x6f\x96\x11\x13\x5c\x88\x39\x7c\xf1\xee\x6d\xf7\x3b\xe3\x0b\xcd\x0f\x83\x5f\x52\xca\xc9\x51\xd5\x9d\x62\xf6\x57\x59\xda\x8f\x5d\xb7\x58\x4e\xd7\x31\xd6\x24\xa6\x43\x2f\x7a\x44\xdc\x2d\x13\xce\xf3\xb9\xaf\x8a\x2b\xc4\x74\x3d\x90\x8d\xf5\x8f\x2c\x8d\x0b\x3b\x5b\x38\x1d\x51\x9a\x50\x2b\xfd\xa8\x0f\xca\xd1\x03\xab\xbe\x7c\xfd\x84\x1c\x6a\x54\x6f\xe5\xb7\x72\xa5\x0c\x5f\xc2\xb2\x26\x2f\x0d\xb3\x50\xff\x40\x96\x53\x88\xba\x44\x59\x86\x50\x3a\xd4\x0d\x71\x2f\x3c\x4c\xff\xec\xf2\x95\x50\xe3\x6c\x51\xdd\xec\x62\xc6\xc4\xf3\x74\x55\x5d\xed\xbd\x38\x98\x4a\x47\xc6\xb4\x11\xdb\x4f\x3f\x64\xef\xc4\xe5\x83\x01\x1c\xcd\x7f\x2f\xbe\x47\x6f\x43\x94\x8f\xcf\xd5\xef\x96\xe3\xe4\x7f\x3e\x45\x6f\xc1\xdf\x9d\x61\xad\x86\x49\xb6\x56\xdd\xab\x7e\xf7\xea\xcf\x00\x00\x00\xff\xff\x40\xf2\xf6\xc6\xdd\x07\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 2013, mode: os.FileMode(420), modTime: time.Unix(1554295704, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x8b\x1b\x37\x10\x7e\xcf\x5f\x31\xa8\x94\x3c\xb4\x2b\xf9\xd2\x40\xc3\x9e\x7d\x10\x1a\x0a\xa5\x29\x84\x26\xee\xeb\xa1\x93\xc6\xbb\x73\xd1\x4a\x5b\x8d\xec\xf3\xd6\xf8\x7f\x2f\xfb\xd3\x6b\xdf\x35\x69\x43\x83\x5f\xa4\x4f\xdf\xec\xe8\xfb\x34\x1a\x79\x59\xa6\xca\x81\xd3\xbe\x58\x09\xf4\xd9\x96\xc5\xcd\x33\x80\x65\x89\xda\xb6\x03\x80\xa5\x23\xff\x11\x22\xba\x95\x20\x13\xbc\x80\xd4\xd4\xb8\x12\x54\xe9\x02\x15\xef\x8a\xef\xf6\x95\x13\x50\x46\xdc\xac\x44\x99\x52\xcd\xb9\x52\x45\xd4\x75\xf9\xa7\xcb\xd0\x17\xe4\x31\x33\xd6\xcb\x52\xf3\x36\x6a\x49\x41\x51\x55\xa8\x7e\x76\xdb\x7e\xf0\xb6\x88\x88\x5e\xf2\xae\x10\xa0\x86\x94\x6c\x22\xd5\xa9\x9f\x00\x3c\x90\xb7\xe1\x41\xde\xde\xa2\xdf\xc1\x0a\x0e\x03\x0c\xa0\x6b\x5a\xff\xfe\x36\x87\xc3\x41\xf6\xc3\xe3\xf1\xfb\x69\xd1\x38\xfa\x03\x23\x53\xf0\x1d\xe1\x34\x9d\x93\xac\x4e\xfa\x75\x4d\xeb\xe8\x3a\xd2\x69\xfa\x04\x69\xfe\xb5\x73\x68\x4e\x3e\x1c\x32\xa0\x0d\xf8\x90\x40\xd6\x31\xec\x9b\x77\x3a\x95\x70\x3c\x5e\x12\x5a\x43\x5e\x1b\x83\xcc\xbf\x62\x33\x5f\xd7\x23\xd8\xeb\xb2\x15\xf9\xf7\x68\x22\xa6\xf3\x2c\x80\x8e\xf1\x2c\xee\xc4\xfc\x74\x64\x06\xe8\xed\xe5\x8e\x2e\xa0\x6d\x74\xef\x22\x6e\x68\x9f\x83\x50\x62\x66\x6a\xf0\x1c\x1c\xfe\x16\x2c\xe6\x20\x8c\x23\x71\x66\xf8\x7a\xfd\xcb\x9b\xd1\xed\x76\xfc\x84\x31\x27\x53\x66\xe9\x26\xac\x0b\x9e\x31\xce\x15\x7b\x0b\xd9\x2c\x0a\xbd\xbe\x73\xf8\x01\x1d\x56\x98\x62\xef\xd7\x05\x36\xb1\x8f\xd7\x7d\x65\xa9\x53\x69\x2d\xd5\x58\xe4\xcb\xbb\x60\x9b\xb1\xf4\x52\xe3\xb0\x1f\xcb\x4a\x93\xff\x29\xf8\x84\x3e\x4d\x55\x67\x89\x6b\xa7\x9b\x1c\x9e\xfb\xe0\xf1\xf9\xf5\x00\x87\x5a\x1b\x4a\x4d\x0e\x8b\x11\x49\x51\x7b\xa6\xd4\x55\xcc\xb0\x0a\xf2\xc5\x82\xc1\x91\x47\x1d\x7b\xda\xf1\x51\x22\xc9\x65\x78\x78\x22\xdb\x9d\x0b\xe6\xe3\xe3\x74\x57\x5f\x90\x6e\xa9\x06\x91\xfd\xcc\xd2\x0e\xc8\xae\x84\x0b\xda\x92\x2f\xc4\x78\xed\xba\x05\xe3\x34\xf3\x4a\xd4\xba\xc0\x6c\x24\x40\x17\xbe\x12\x03\xaf\x22\x9f\x95\x48\x45\x99\x72\xb8\x5a\x2c\x76\xe5\xf5\x74\x6f\x6d\x7b\xa2\x57\x8b\xc5\xb7\xd7\x97\x7a\x36\x0e\xf7\x23\xa8\x1d\x15\x3e\xa3\x84\x15\xe7\x60\xd0\x27\x8c\xe3\xd2\x26\xf8\x94\x6d\x74\x45\xae\xc9\x81\xb5\xe7\x8c\x31\xd2\x66\x5c\xbe\xdf\x72\xa2\x4d\x93\x99\xde\xbb\xcb\xe8\x49\x4a\x7b\xae\xb5\xf6\xa3\x9a\x4b\x05\x43\x1e\xa6\xbf\x30\x87\x17\x58\x5d\x4f\x78\xa5\x63\x41\x3e\x4b\xa1\xce\x21\xfb\x61\xbe\x62\x82\x0b\x31\x87\x6f\x5e\xbd\x6c\x7f\x27\x7c\x96\xf3\x6d\xef\x97\x94\x72\x74\x54\xb5\xbb\x98\xfc\x55\x96\x76\x43\xd5\xcd\x86\xe3\x71\x0c\x9a\xc4\xb8\xe9\x59\x8d\x88\x9b\x79\xc0\xa9\x3f\x77\xaa\xb8\x44\x4c\x97\x0d\xd9\x58\x7f\xcf\xd2\xb8\xb0\xb5\x1b\xa7\x23\x4a\x13\x2a\xa5\xef\xf5\x5e\x39\xba\x63\xd5\xc9\xd7\x0f\xc8\xa1\x42\xf5\x52\xfe\x28\x17\xca\xf0\x39\x2c\x2b\xf2\xd2\x30\x0b\x35\xd4\xcd\xe1\xd0\x5d\x67\xe3\xe8\x7d\xd2\x89\xcc\x1b\x8a\x6d\x07\xf9\xfc\x9e\x14\x77\x7c\xd5\x0a\xea\xbe\x08\xa6\xd4\x91\x31\xad\xc4\xfa\xc3\xcf\xd9\x2b\x71\xfe\x0a\x00\x47\x73\x0a\xda\xa1\xb7\x21\xca\xfb\xc7\x51\x37\xf3\xbb\xfd\x0f\xd1\x5d\xca\x4f\xc7\x8e\xda\xc6\xf6\xfa\xef\x3d\xe6\x14\xa2\x2e\x50\x16\x21\x14\x0e\x75\x4d\xdc\xb9\xdc\x3f\x75\xd9\xf9\x93\xa8\x86\x46\xaa\xda\x46\xcd\x8c\x89\xa7\xa7\xe4\xbf\xf9\xf2\x7f\x27\xff\x32\x7f\xbf\x8a\x05\x9f\x3f\xa7\xe1\x4d\xe8\x4f\x69\xa9\xfa\x2e\xbe\x54\xed\x3f\x9a\x9b\x67\x7f\x07\x00\x00\xff\xff\x33\xcf\x45\x11\xd9\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2265, mode: os.FileMode(420), modTime: time.Unix(1554295704, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

