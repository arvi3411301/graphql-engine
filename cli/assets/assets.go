// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8b\x23\x37\x10\xbd\xef\xaf\x28\x14\xc2\x5e\xd2\x92\x67\xb3\x90\xa5\x6d\x0f\x2c\x09\x21\x21\x09\x0c\x64\x27\xd7\xa5\x46\x5d\xdd\x5d\xb3\x6a\xa9\xa3\x92\x3d\xe3\x18\xff\xf7\xd0\x5f\x76\xdb\x63\xf2\xb1\x24\xf8\x22\xbd\x2a\xd5\xd3\x7b\xaa\x96\xbc\xaa\x53\xe3\xc0\xa1\xaf\xd6\x8a\x7c\xb6\x11\x75\xfb\x0a\x60\x55\x13\x16\xdd\x00\x60\xe5\xd8\x7f\x82\x48\x6e\xad\xd8\x06\xaf\x20\xed\x5a\x5a\x2b\x6e\xb0\x22\xd3\xfa\x4a\x41\x1d\xa9\x5c\xab\x3a\xa5\x56\x72\x63\x24\x85\x88\x15\xe9\x2a\x84\xca\x11\xb6\x2c\xda\x86\xc6\xd4\x28\x9b\x88\x59\x15\xb1\xad\x7f\x77\x19\xf9\x8a\x3d\x19\x1b\xbc\x04\x47\x06\x45\x28\x89\x29\x71\xdb\x71\xe8\xbe\xac\x19\xf9\xc5\x46\x6e\xd3\x30\x01\x78\x62\x5f\x84\x27\xfd\xf1\x23\xf9\x2d\xac\x61\x3f\xc2\x00\xd8\xf2\x0f\x41\x52\x0e\xfb\xbd\x1e\xc7\x87\xc3\x57\xf3\xf0\x5d\x88\x29\x07\x35\xc4\xbb\xc9\xe1\xa0\x4e\x09\xd6\xf1\x6f\x14\x85\x83\xef\x4b\x9c\xa6\xf3\x2a\x05\x26\x7c\xdf\xf2\x7d\x74\x7d\xd2\x69\x7a\x25\x69\x5e\xed\x1c\x9a\x27\xef\xf7\x19\x70\x09\x3e\x24\xd0\x6d\x0c\xcf\xbb\x3b\x4c\x35\x1c\x0e\x97\x09\xba\x46\x79\x6f\x2d\x89\xfc\x44\xbb\x79\x1c\x27\x70\x50\x5e\x34\xec\x7f\x25\x1b\x29\x9d\xb3\x00\x39\xa1\xb3\x75\xa7\xcc\xbf\x5e\x99\x01\xf9\xe2\x72\x47\x17\xd0\x26\xba\xbb\x48\x25\x3f\xe7\xa0\xcc\xdc\xd4\xe1\x7c\x7f\x09\x05\xe5\xa0\xac\xe3\x73\xc3\xef\xef\x7f\xfc\x6e\x72\xbb\x1b\x5f\x31\xe6\x64\xca\x8c\x8e\x3c\x3e\x38\xfa\x40\x8e\x1a\x4a\x71\x50\x7e\x81\xcd\x4b\x1d\x4b\xf4\x89\xd7\x0a\x5e\xf1\xe7\x1f\x71\x9c\x15\xf0\x05\x64\x47\xe8\xb0\x1c\xba\xd7\x9c\xda\x77\x65\xa6\xaf\x6a\xf5\x10\x8a\xdd\xd4\xde\x69\xe7\x68\x18\xeb\x06\xd9\x7f\x1b\x7c\x22\x9f\x8e\x9d\x5d\xb0\xb4\x0e\x77\x39\xbc\xf6\xc1\xd3\xeb\xe5\x08\x87\x16\x2d\xa7\x5d\x0e\x8b\x09\x49\x11\xbd\x70\xea\x5b\x6e\x8c\x82\x7e\xb3\x10\x70\xec\x09\xe3\x90\x76\x78\x41\xa4\xa5\x0e\x4f\x57\xd8\x1e\x5c\xb0\x9f\x5e\xd2\xdd\x7c\x06\xdd\xca\x8c\x22\x87\x59\xc1\x5b\xe0\x62\xad\x5c\xc0\x82\x7d\xa5\xa6\x4f\xbb\x0f\x58\x87\x22\x6b\xd5\x62\x45\xd9\x94\x00\xfd\xf2\xb5\x1a\xf3\x1a\xf6\x59\x4d\x5c\xd5\x29\x87\x9b\xc5\x62\x5b\x2f\x8f\x77\x43\xd1\x9d\xf1\xcd\x62\xf1\xe5\xf2\x52\x4f\xe9\xe8\x79\x02\xd1\x71\xe5\x33\x4e\xd4\x48\x0e\x96\x7c\xa2\x38\x85\xca\xe0\x53\x56\x62\xc3\x6e\x97\x83\xa0\x97\x4c\x28\x72\x39\x85\x1f\x37\x92\xb8\xdc\x65\x76\xf0\xee\x72\xf5\x51\x4a\x77\xae\x2d\xfa\x49\xcd\xa5\x82\x91\x47\xf8\x0f\xca\xe1\x0d\x35\xcb\x23\xde\x60\xac\xd8\x67\x29\xb4\x39\x64\x5f\xcf\x23\x36\xb8\x10\x73\xf8\xe2\xdd\xdb\xee\x77\xc2\x67\x9c\x3f\x0f\x7e\x69\xad\x27\x47\x4d\xb7\x8b\xa3\xbf\xa6\xe0\xed\xd8\x75\xb3\xe1\x74\x1c\xa3\x26\x35\x6d\x7a\xd6\x23\xea\x76\xbe\xe0\xf4\x20\xf4\xaa\xa4\x26\x4a\x97\xaf\x80\x2d\xfc\xa3\x68\xeb\xc2\xa6\x28\x1d\x46\xea\xdf\x00\x7c\xc4\x67\xe3\xf8\x41\x4c\x2f\x1f\x9f\x48\x42\x43\xe6\xad\xfe\x46\x2f\x8c\x95\x73\x58\x37\xec\xb5\x15\x51\xe6\x5f\xd0\x7e\xd6\xe3\xd3\x5d\x7e\xfd\xfb\x73\xbc\x9e\x4d\xa7\xbd\x27\x07\x5b\x63\x14\x4a\x6b\x75\xff\xe1\xfb\xec\x9d\x3a\x7f\x94\x40\xa2\xfd\xef\xc9\xb7\xe4\x8b\x10\xf5\xe3\x4b\xf6\xdb\xf9\x75\xf2\x3f\xef\xa2\xb7\xe0\xef\xf6\xb0\x32\xc3\x4d\xb6\x32\xdd\xdf\x88\xdb\x57\x7f\x06\x00\x00\xff\xff\x1f\xe5\xe9\x94\x4e\x08\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 2126, mode: os.FileMode(420), modTime: time.Unix(1552645172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8b\x23\x37\x10\xbd\xef\xaf\x28\x14\xc2\x5e\xd2\x92\x67\xb3\x90\xa5\x6d\x0f\x2c\x09\x21\x21\x09\x0c\x64\x27\xd7\xa5\x46\x5d\xdd\x5d\xb3\x6a\xa9\xa3\x92\x3d\xe3\x18\xff\xf7\xd0\x5f\x76\xdb\x63\xf2\xb1\x24\xf8\x22\xbd\x2a\xd5\xd3\x7b\xaa\x96\xbc\xaa\x53\xe3\xc0\xa1\xaf\xd6\x8a\x7c\xb6\x11\x75\xfb\x0a\x60\x55\x13\x16\xdd\x00\x60\xe5\xd8\x7f\x82\x48\x6e\xad\xd8\x06\xaf\x20\xed\x5a\x5a\x2b\x6e\xb0\x22\xd3\xfa\x4a\x41\x1d\xa9\x5c\xab\x3a\xa5\x56\x72\x63\x24\x85\x88\x15\xe9\x2a\x84\xca\x11\xb6\x2c\xda\x86\xc6\xd4\x28\x9b\x88\x59\x15\xb1\xad\x7f\x77\x19\xf9\x8a\x3d\x19\x1b\xbc\x04\x47\x06\x45\x28\x89\x29\x71\xdb\x71\xe8\xbe\xac\x19\xf9\xc5\x46\x6e\xd3\x30\x01\x78\x62\x5f\x84\x27\xfd\xf1\x23\xf9\x2d\xac\x61\x3f\xc2\x00\xd8\xf2\x0f\x41\x52\x0e\xfb\xbd\x1e\xc7\x87\xc3\x57\xf3\xf0\x5d\x88\x29\x07\x35\xc4\xbb\xc9\xe1\xa0\x4e\x09\xd6\xf1\x6f\x14\x85\x83\xef\x4b\x9c\xa6\xf3\x2a\x05\x26\x7c\xdf\xf2\x7d\x74\x7d\xd2\x69\x7a\x25\x69\x5e\xed\x1c\x9a\x27\xef\xf7\x19\x70\x09\x3e\x24\xd0\x6d\x0c\xcf\xbb\x3b\x4c\x35\x1c\x0e\x97\x09\xba\x46\x79\x6f\x2d\x89\xfc\x44\xbb\x79\x1c\x27\x70\x50\x5e\x34\xec\x7f\x25\x1b\x29\x9d\xb3\x00\x39\xa1\xb3\x75\xa7\xcc\xbf\x5e\x99\x01\xf9\xe2\x72\x47\x17\xd0\x26\xba\xbb\x48\x25\x3f\xe7\xa0\xcc\xdc\xd4\xe1\x7c\x7f\x09\x05\xe5\xa0\xac\xe3\x73\xc3\xef\xef\x7f\xfc\x6e\x72\xbb\x1b\x5f\x31\xe6\x64\xca\x8c\x8e\x3c\x3e\x38\xfa\x40\x8e\x1a\x4a\x71\x50\x7e\x81\xcd\x4b\x1d\x4b\xf4\x89\xd7\x0a\x5e\xf1\xe7\x1f\x71\x9c\x15\xf0\x05\x64\x47\xe8\xb0\x1c\xba\xd7\x9c\xda\x77\x65\xa6\xaf\x6a\xf5\x10\x8a\xdd\xd4\xde\x69\xe7\x68\x18\xeb\x06\xd9\x7f\x1b\x7c\x22\x9f\x8e\x9d\x5d\xb0\xb4\x0e\x77\x39\xbc\xf6\xc1\xd3\xeb\xe5\x08\x87\x16\x2d\xa7\x5d\x0e\x8b\x09\x49\x11\xbd\x70\xea\x5b\x6e\x8c\x82\x7e\xb3\x10\x70\xec\x09\xe3\x90\x76\x78\x41\xa4\xa5\x0e\x4f\x57\xd8\x1e\x5c\xb0\x9f\x5e\xd2\xdd\x7c\x06\xdd\xca\x8c\x22\x87\x59\xc1\x5b\xe0\x62\xad\x5c\xc0\x82\x7d\xa5\xa6\x4f\xbb\x0f\x58\x87\x22\x6b\xd5\x62\x45\xd9\x94\x00\xfd\xf2\xb5\x1a\xf3\x1a\xf6\x59\x4d\x5c\xd5\x29\x87\x9b\xc5\x62\x5b\x2f\x8f\x77\x43\xd1\x9d\xf1\xcd\x62\xf1\xe5\xf2\x52\x4f\xe9\xe8\x79\x02\xd1\x71\xe5\x33\x4e\xd4\x48\x0e\x96\x7c\xa2\x38\x85\xca\xe0\x53\x56\x62\xc3\x6e\x97\x83\xa0\x97\x4c\x28\x72\x39\x85\x1f\x37\x92\xb8\xdc\x65\x76\xf0\xee\x72\xf5\x51\x4a\x77\xae\x2d\xfa\x49\xcd\xa5\x82\x91\x47\xf8\x0f\xca\xe1\x0d\x35\xcb\x23\xde\x60\xac\xd8\x67\x29\xb4\x39\x64\x5f\xcf\x23\x36\xb8\x10\x73\xf8\xe2\xdd\xdb\xee\x77\xc2\x67\x9c\x3f\x0f\x7e\x69\xad\x27\x47\x4d\xb7\x8b\xa3\xbf\xa6\xe0\xed\xd8\x75\xb3\xe1\x74\x1c\xa3\x26\x35\x6d\x7a\xd6\x23\xea\x76\xbe\xe0\xf4\x20\xf4\xaa\xa4\x26\x4a\x97\xaf\x80\x2d\xfc\xa3\x68\xeb\xc2\xa6\x28\x1d\x46\xea\xdf\x00\x7c\xc4\x67\xe3\xf8\x41\x4c\x2f\x1f\x9f\x48\x42\x43\xe6\xad\xfe\x46\x2f\x8c\x95\x73\x58\x37\xec\xb5\x15\x51\xe6\x5f\xd0\x7e\xd6\xe3\xd3\x5d\x7e\xfd\xfb\x73\xbc\x9e\x4d\xa7\xbd\x27\x07\x5b\x63\x14\x4a\x6b\x75\xff\xe1\xfb\xec\x9d\x3a\x7f\x94\x40\xa2\xfd\xef\xc9\xb7\xe4\x8b\x10\xf5\xe3\x4b\xf6\xdb\xf9\x75\xf2\x3f\xef\xa2\xb7\xe0\xef\xf6\xb0\x32\xc3\x4d\xb6\x32\xdd\xdf\x88\xdb\x57\x7f\x06\x00\x00\xff\xff\x1f\xe5\xe9\x94\x4e\x08\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 2126, mode: os.FileMode(420), modTime: time.Unix(1552645167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xdb\x36\x10\xbd\xe7\x57\x0c\x58\x14\xb9\x54\xa4\x37\x0d\xd0\x40\xb6\x17\x08\x1a\x14\x2d\xda\x02\x0b\x24\xdb\x6b\xc0\xa5\x46\xd2\x6c\x28\x52\xe5\xd0\xde\x55\x0d\xff\xf7\x42\x5f\x96\xac\x75\x93\x74\xd1\xc2\x17\xf2\xcd\xc7\xd3\x3c\x0e\x39\xde\x94\xb1\xb2\x60\xb5\x2b\xb6\x02\x5d\xb2\x63\x71\xfd\x02\x60\x53\xa2\xce\xda\x05\xc0\xc6\x92\xfb\x04\x01\xed\x56\x90\xf1\x4e\x40\x6c\x6a\xdc\x0a\xaa\x74\x81\xaa\x76\x85\x80\x32\x60\xbe\x15\x65\x8c\x35\xa7\x4a\x71\xf4\x41\x17\x28\x0b\xef\x0b\x8b\xba\x26\x96\xc6\x57\xaa\xd4\xbc\x0b\x3a\x29\x82\xae\xcb\x3f\x6d\x82\xae\x20\x87\xca\x78\xc7\xde\xa2\xd2\xcc\x18\x59\xe5\x7a\xdf\x72\xc8\x2e\xad\x1a\xf8\xd9\x04\xaa\x63\xbf\x01\x78\x20\x97\xf9\x07\xf9\xf1\x23\xba\x3d\x6c\xe1\x30\xc0\x00\xba\xa6\x9f\x3d\xc7\x14\x0e\x07\x39\xac\x8f\xc7\xef\xe6\xe6\x1b\x1f\x62\x0a\xa2\xb7\xb7\x9b\xe3\x51\x4c\x0e\xc6\xd2\x1f\x18\x98\xbc\xeb\x52\x4c\xdb\x79\x96\x4c\x47\xfd\xb6\xa6\xdb\x60\x3b\xa7\x69\x7b\xc1\x69\x9e\xed\x1c\x9a\x3b\x1f\x0e\x09\x50\x0e\xce\x47\x90\x75\xf0\x8f\xcd\x8d\x8e\x25\x1c\x8f\x4b\x07\x59\x6a\x7e\x6b\x0c\x32\xff\x8a\xcd\xdc\xae\x47\xb0\xaf\x3c\xab\xc8\xbd\x47\x13\x30\x9e\xb3\x00\x5a\xc6\xb3\xb8\xc9\xf3\xf3\x91\x09\xa0\xcb\x96\x5f\xb4\x80\x76\xc1\xde\x04\xcc\xe9\x31\x05\xa1\xe6\xa2\xf6\xe7\xfb\xbb\xcf\x30\x05\x61\x2c\x9d\x0b\x7e\x7b\xfb\xcb\xbb\x51\xed\x76\x7d\x41\x98\x49\x94\x19\x1d\x3a\x7d\x67\xf1\x03\x5a\xac\x30\x86\xbe\xf2\x05\x36\x4f\x75\x4a\xd1\x39\x5e\x4a\x78\x41\x9f\xaf\xe2\x38\x4b\xe0\x32\x48\x4e\xd0\x71\xdd\x77\xaf\x9a\xda\x77\xa3\xc6\x5b\xb5\xb9\xf3\x59\x33\xb6\x77\x6c\x2c\xf6\x6b\x59\x69\x72\x3f\x7a\x17\xd1\xc5\x53\x67\x67\xc4\xb5\xd5\x4d\x0a\x2f\x9d\x77\xf8\x72\x3d\xc0\xbe\xd6\x86\x62\x93\xc2\x6a\x44\x62\xd0\x8e\x29\x76\x2d\x37\x58\x41\xbe\x5a\x31\x58\x72\xa8\x43\xef\x76\x7c\x42\x24\xb9\xf4\x0f\x17\xd8\xee\xac\x37\x9f\x9e\xd2\x5d\x3d\x83\x6e\xa3\x86\x22\xfb\x5d\x46\x7b\xa0\x6c\x2b\xac\xd7\x19\xb9\x42\x8c\x57\xbb\x33\x18\xab\x99\xb7\xa2\xd6\x05\x26\xa3\x03\x74\xe1\x5b\x31\xf8\x55\xe4\x92\x12\xa9\x28\x63\x0a\x57\xab\xd5\xbe\x5c\x9f\xde\x86\xac\x3d\xe3\xab\xd5\xea\xdb\xf5\xb2\x9e\xdc\xe2\xe3\x08\x6a\x4b\x85\x4b\x28\x62\xc5\x29\x18\x74\x11\xc3\x68\xca\xbd\x8b\x49\xae\x2b\xb2\x4d\x0a\xac\x1d\x27\x8c\x81\xf2\xd1\x7c\xbf\xe3\x48\x79\x93\x98\x5e\xbb\x65\xf4\xa9\x94\xf6\x5c\x6b\xed\xc6\x6a\x96\x15\x0c\x3c\x4c\x7f\x61\x0a\xaf\xb0\x5a\x9f\xf0\x4a\x87\x82\x5c\x12\x7d\x9d\x42\xf2\xfd\xdc\x62\xbc\xf5\x21\x85\x6f\xde\xbc\x6e\x7f\x13\x3e\xe3\xfc\xad\xd7\x4b\x4a\x39\x2a\xaa\xda\xaf\x38\xe9\xab\x32\xda\x0f\x5d\x37\x5b\x8e\xc7\x31\xd4\x24\xc6\x8f\x9e\xf5\x88\xb8\x9e\x07\x4c\x03\xa1\xab\x8a\x4b\xc4\xb8\x9c\x02\x26\x73\xf7\x2c\x8d\xf5\xbb\x2c\xb7\x3a\x60\x37\x03\xf4\xbd\x7e\x54\x96\xee\x58\x75\xe5\xeb\x07\x64\x5f\xa1\x7a\x2d\x7f\x90\x2b\x65\xf8\x1c\x96\x15\x39\x69\x98\x85\x1a\xfa\xe6\x70\xe8\xde\x03\x63\xe9\x7d\xd4\x91\xcc\x3b\x0a\xed\x7d\xfd\xf2\x37\x29\xee\xfc\x55\x5b\x50\x97\x11\x4c\xa9\x03\x63\xdc\x8a\xdb\x0f\x3f\x25\x6f\xc4\xf9\xa4\x01\x0e\x66\x0a\xda\xa3\xcb\x7c\x90\xf7\x4f\xa3\xae\xe7\x77\xfb\x1f\xa2\x3b\xca\xcf\xc7\xbe\x58\xbc\x3f\x5f\xaf\xf1\xb3\x26\x6d\xfb\xd2\x77\xc3\xf6\x34\x8b\xfe\x9d\x2e\xff\x35\xf9\xf3\xf4\xfd\x5f\x24\xf8\xf2\x39\x0d\xaf\x7c\x7f\x4a\x1b\xd5\xbf\xe2\x1b\xd5\xfe\x85\xba\x7e\xf1\x77\x00\x00\x00\xff\xff\xa8\xa0\x90\x88\x4a\x09\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2378, mode: os.FileMode(420), modTime: time.Unix(1552645113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

