// Code generated by go-bindata.
// sources:
// assets/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4f\x6b\xfc\x36\x10\xbd\xff\x3e\xc5\xa0\x52\x72\xa9\xa5\x4d\x1a\x68\xf0\xda\x0b\xa5\x50\x0a\x6d\x21\x87\xa6\xd7\xa0\xc8\x63\x7b\x36\xb2\xe4\x6a\xb4\xbb\x71\xc3\x7e\xf7\xe2\x7f\xbb\xce\x6e\xa1\x34\xb4\xf8\xa2\x99\x37\xd2\x9b\xf7\x24\xc6\x59\x1d\x1b\x0b\x56\xbb\x2a\x17\xe8\x92\x1d\x8b\xcd\x17\x80\xac\x46\x5d\xf4\x0b\x80\xcc\x92\x7b\x85\x80\x36\x17\x64\xbc\x13\x10\xbb\x16\x73\x41\x8d\xae\x50\xb5\xae\x12\x50\x07\x2c\x73\x51\xc7\xd8\x72\xaa\x14\x47\x1f\x74\x85\xb2\xf2\xbe\xb2\xa8\x5b\x62\x69\x7c\xa3\x6a\xcd\xbb\xa0\x93\x2a\xe8\xb6\xfe\xc3\x26\xe8\x2a\x72\xa8\x8c\x77\xec\x2d\x2a\xcd\x8c\x91\x55\xa9\xf7\x3d\x87\x1c\x8e\x55\x13\x3f\x9b\x40\x6d\x1c\x03\x38\x90\x2b\xfc\x41\x3e\x3f\xa3\xdb\x43\x0e\xef\x63\x16\x40\xb7\xf4\x93\xe7\x98\xc2\xfb\xbb\x9c\xd6\xc7\xe3\x37\x0b\xf4\xd1\x87\x98\x82\x18\xe1\x3e\x38\x1e\xc5\x09\x37\x96\x7e\xc7\xc0\xe4\xdd\x70\xc0\x39\x5c\x9c\x51\xe8\xa8\xbf\x6f\xe9\x29\xd8\xa1\xe6\x1c\x5e\xd7\x2c\xcf\xfa\x98\x5a\xf6\x64\x0c\x32\xff\x8c\xdd\xd8\xf3\x1c\x2d\x2a\x76\xc1\x3e\x06\x2c\xe9\x2d\x05\xa1\x16\xcd\x8e\x9e\xfd\xea\x0b\x4c\x41\x18\x4b\x62\x44\x8e\xeb\xd1\x2f\x75\x36\x2c\x53\xf3\x3d\x66\x2f\xbe\xe8\x66\x43\x63\x67\x71\x5c\xcb\x46\x93\xfb\xc1\xbb\x88\x2e\x9e\xcc\x2c\x88\x5b\xab\xbb\x14\x6e\x9c\x77\x78\xb3\x9e\xd2\xbe\xd5\x86\x62\x97\xc2\x6a\xce\xc4\xa0\x1d\x53\x1c\xa4\x4e\x28\xc8\xbb\x15\x83\x25\x87\x3a\x8c\x65\xc7\x2b\x22\xc9\xb5\x3f\xfc\x0d\xdb\x8b\xf5\xe6\xf5\x9a\xee\xf6\x13\x74\x99\x9a\x44\x8e\x51\x41\x7b\xa0\x22\x17\xd6\xeb\x82\x5c\x25\xa6\xc7\x34\x02\xc6\x6a\xe6\x5c\xb4\xba\xc2\x64\x2e\x80\x61\x7b\x3e\x39\x0b\x0d\xb9\xa4\x46\xaa\xea\x98\xc2\xed\x6a\xb5\xaf\xe7\x96\x0e\x54\xc4\x7a\xc8\x7d\xbd\xbe\xd4\x53\x5a\x7c\x9b\x93\xda\x52\xe5\x12\x8a\xd8\x70\x0a\x06\x5d\xc4\x30\x43\xa5\x77\x31\x29\x75\x43\xb6\x4b\x81\xb5\xe3\x84\x31\x50\x39\xc3\xdb\x1d\x47\x2a\xbb\xc4\x8c\xde\x5d\xee\x3e\x49\xe9\xef\xb5\xd5\x6e\x56\x73\xa9\x60\xe2\x61\xfa\x13\x53\xb8\xc3\x66\x7d\xca\x37\x3a\x54\xe4\x92\xe8\xdb\x14\x92\x6f\x97\x88\xf1\xd6\x87\x14\xbe\x7a\xb8\xef\xbf\x73\x7e\xc1\xf9\xcb\xe8\x97\x94\x72\x76\x54\xf5\x5d\x9c\xfc\x55\x05\xed\xa7\x57\xb7\x58\xce\xd7\x31\x69\x12\x73\xd3\x8b\x37\x22\x36\xcb\x0d\xe7\x11\x34\xa8\xe2\x1a\x31\x5e\xce\x1d\x53\xb8\x2d\x4b\x63\xfd\xae\x28\xad\x0e\x38\x4c\x1d\xbd\xd5\x6f\xca\xd2\x0b\xab\x41\xbe\x3e\x20\xfb\x06\xd5\xbd\xfc\x4e\xae\x94\xe1\x8f\x69\xd9\x90\x93\x86\x59\xa8\x7f\x41\xfb\xa9\x71\x77\x2b\x57\x49\x81\x7b\xd5\x0b\x1e\x18\xc1\xd4\x3a\x30\xc6\x5c\x3c\xfd\xf6\x63\xf2\x20\x3e\xce\x3e\xe0\x60\xfe\x23\xc6\x3d\xba\xc2\x07\xb9\xbd\xa6\xdc\x2c\x07\xc7\xff\x41\x3d\x88\xfd\x27\xe2\x4c\x8d\x83\x2a\x53\xfd\x7f\x69\xf3\xe5\xaf\x00\x00\x00\xff\xff\x1c\xea\x4c\xfe\x9f\x06\x00\x00")

func assetsConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsConsoleHtml,
		"assets/console.html",
	)
}

func assetsConsoleHtml() (*asset, error) {
	bytes, err := assetsConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/console.html", size: 1695, mode: os.FileMode(436), modTime: time.Unix(1530367126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/console.html": assetsConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"console.html": &bintree{assetsConsoleHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

